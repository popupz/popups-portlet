buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jelmerk:liferay-plugin:0.1.0-SNAPSHOT'
        classpath 'net.sf.proguard:proguard-gradle:4.9'
    }
}

defaultTasks 'clean', 'deploy'

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'liferay-portlet'
apply plugin: 'liferay-servicebuilder'

archivesBaseName = 'popups-portlet'
version = '1.0.0.4'

// scala 2.10 is not backwards compatible with java 5 see : https://groups.google.com/forum/#!topic/scala-language/oskST3kY7nI

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext.proguardEnabled = true
ext.serviceBuildNumber = 61 // increment this number every time you make changes to service.xml that requires database changes

sourceSets {
    main {
        // needed because service.properties gets written there by servicebuilder
        resources {
            srcDir 'src/main/scala'
        }
    }
}

liferay {
    appServerDirName = liferayHome
}

servicebuilder {
    serviceInputFileName = file('src/main/servicebuilder/service.xml')
    jalopyInputFileName  = file('src/main/servicebuilder/jalopy.xml')

    // put the service builder classes in src/main/scala for joint compilation
    implSrcDirName = file('src/main/scala')
}

dependencies {

    compile 'org.scala-lang:scala-library:2.10.1'
    compile files(jarService.archivePath)

    providedCompile 'javax.servlet:servlet-api:2.5'
    providedCompile 'javax.servlet.jsp:jsp-api:2.1'

    providedCompile fileTree(dir: "$liferay.appServerGlobalLibDir", include: '*.jar', exclude: ['activation.jar', 'jta.jar'])

    providedCompile files(
            "$liferay.appServerPortalDir/WEB-INF/lib/util-java.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/util-bridges.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/util-taglib.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/commons-logging.jar",

            "$liferay.appServerPortalDir/WEB-INF/lib/asm.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/aopalliance.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/cglib.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-aop.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-asm.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-beans.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-context.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-core.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-expression.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-web.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-web-servlet.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/spring-web-portlet.jar",

            "$liferay.appServerPortalDir/WEB-INF/lib/json-java.jar",

            "$liferay.appServerPortalDir/WEB-INF/lib/jstl-api.jar",
            "$liferay.appServerPortalDir/WEB-INF/lib/jstl-impl.jar"
    )

    serviceCompile files("$liferay.appServerGlobalLibDir/portal-service.jar")
}

idea {
    module {
        sourceDirs += sourceSets.service.allJava.srcDirs
    }
}

compileJava {
    dependsOn 'jarService'
}

compileScala {
    scalaCompileOptions.useCompileDaemon = true
    scalaCompileOptions.daemonServer = 'localhost:3200'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
}

generateService {
    doLast {
        ext {
            servicePropertiesFile = file("src/main/scala/service.properties")
        }
        servicePropertiesFile.write(servicePropertiesFile.text.replaceAll('build.number=([0-9]+)', "build.number=${serviceBuildNumber}"));
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: ['war']) {
    ext {
        outDir = file("${buildDir}/proguard")
        shrunkenJar = "${outDir}/${archivesBaseName}-${version}.jar"
        scalaJar = configurations.compile.find { it.name.startsWith('scala-library') }
    }
    injars sourceSets.main.output.classesDir
    injars scalaJar
    outjars shrunkenJar
    libraryjars configurations.compile - files(scalaJar) + configurations.serviceCompile + configurations.providedCompile
    configuration 'proguard.cfg'
}

task shrinkWar(type: Jar, dependsOn: ['proguard']) {
    destinationDir = proguard.outDir
    includeEmptyDirs = false
    extension = 'war'

    from (zipTree(war.archivePath)) {
        exclude 'WEB-INF/classes/**/*.class'
        exclude 'WEB-INF/lib/scala-library*'
    }

    from (file(proguard.shrunkenJar)) {
        into 'WEB-INF/lib'
    }
}

if (proguardEnabled) {
    deploy {
        dependsOn 'shrinkWar'
        warFile = file(shrinkWar.archivePath)
    }
}

if (file('.').getName() != 'popups-portlet') {
    throw new GradleException('Project must be checked out to a directory called popups-portlet or ' +
            'servicebuilder wont be able to generate the correct classes')
}

sassToCss.enabled = false